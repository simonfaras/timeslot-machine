{"version":3,"sources":["utils/useStorage.js","components/EntryInput.js","App.js","reportWebVitals.js","index.js"],"names":["defaultParse","data","useStorage","initialValue","key","parse","useState","value","setValue","useEffect","localStorage","getItem","JSON","setItem","stringify","EntryInput","onChange","start","end","activity","onSubmit","e","preventDefault","values","Array","from","target","elements","filter","element","nodeName","reduce","acc","input","name","reset","focus","className","type","defaultValue","required","weekdays","formatEntryHeading","date","getDay","formatDate","getTimeslotsSum","timeslots","sum","timeslot","startDate","Date","getTimespan","formatTimeslot","minutes","Math","floor","isLastInstanceOfActivityForDay","index","map","lastIndexOf","getTotalTimeForActivity","isLunchTimeslot","toLowerCase","parseDays","days","day","parseISODate","App","lunchDuration","workdayHours","settings","setSettings","setDays","editTimeslot","setEditTimeslot","now","addDayDate","setAddDayDate","updateSettings","property","current","calcEndTime","timeslotsArray","slice","dateString","find","defaultLunchStart","defaultLunchEnd","addDate","push","Number","parseInt","lunchTimeslot","endTime","length","onClick","window","confirm","htmlFor","id","dayIndex","daysArray","timeslotIndex","isEditEntry","updateTimeslot","toFixed","deleteTimeslot","addTimeslot","disabled","some","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8094e4bd.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst defaultParse = (data) => data;\n\nconst useStorage = (initialValue, key, parse = defaultParse) => {\n  const [value, setValue] = useState(initialValue);\n\n  useEffect(() => {\n    const data = localStorage.getItem(key);\n    if (data) {\n      setValue(parse(JSON.parse(data)));\n    }\n  }, [key, parse]);\n\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value, setValue, key]);\n\n  return [value, setValue];\n};\n\nexport default useStorage;\n","const EntryInput = ({ onChange, start, end, activity }) => {\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const values = Array.from(e.target.elements)\n      .filter((element) => element.nodeName === \"INPUT\")\n      .reduce(\n        (acc, input) => ({\n          ...acc,\n          [input.name]: input.value,\n        }),\n        {}\n      );\n\n    onChange(values);\n    e.target.reset();\n    e.target[0].focus();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"entry entry-input\">\n        <div className=\"timespan\">\n          <input type=\"time\" name=\"start\" defaultValue={start} required />\n          <span className=\"separator\">-</span>\n          <input type=\"time\" name=\"end\" defaultValue={end} required />\n        </div>\n        <div className=\"description\">\n          <input type=\"text\" name=\"activity\" defaultValue={activity} required />\n          <button type=\"submit\">Spara</button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default EntryInput;\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport formatDate from \"date-fns/format\";\nimport parseISODate from \"date-fns/parseISO\";\nimport addDate from \"date-fns/add\";\nimport useStorage from \"./utils/useStorage\";\nimport EntryInput from \"./components/EntryInput\";\n\nconst weekdays = [\n  \"Söndag\",\n  \"Måndag\",\n  \"Tisdag\",\n  \"Onsdag\",\n  \"Torsdag\",\n  \"Fredag\",\n  \"Lördag\",\n];\n\nconst formatEntryHeading = (date) =>\n  `${weekdays[date.getDay()]} - ${formatDate(date, \"d/M\")}`;\n\nconst getTimeslotsSum = (timeslots) => {\n  const getTimespan = ({ start, end }) => {\n    const startDate = new Date(`2020-01-01 ${start}`);\n    const endDate = new Date(`2020-01-01 ${end}`);\n\n    return endDate - startDate;\n  };\n\n  return timeslots.reduce((sum, timeslot) => sum + getTimespan(timeslot), 0);\n};\n\nconst formatTimeslot = (timeslot) => {\n  const minutes = timeslot / 1000 / 60;\n\n  return `${Math.floor(minutes / 60)} tim ${minutes % 60} min`;\n};\n\nconst isLastInstanceOfActivityForDay = (timeslots, timeslot, index) => {\n  const lastIndex = timeslots\n    .map(({ activity }) => activity)\n    .lastIndexOf(timeslot.activity);\n\n  return lastIndex === index;\n};\n\nconst getTotalTimeForActivity = (activity, timeslots) =>\n  getTimeslotsSum(\n    timeslots.filter((timeslot) => timeslot.activity === activity)\n  ) /\n  1000 /\n  60 /\n  60;\n\nconst isLunchTimeslot = (timeslot) =>\n  timeslot.activity.toLowerCase() === \"lunch\";\n\nconst parseDays = (days) =>\n  days.map((day) => ({\n    ...day,\n    date: parseISODate(day.date),\n  }));\n\nconst App = () => {\n  const [settings, setSettings] = useStorage(\n    {\n      lunchDuration: \"30\",\n      workdayHours: \"8\",\n    },\n    \"settings\"\n  );\n  const [days, setDays] = useStorage([], \"days\", parseDays);\n  const [editTimeslot, setEditTimeslot] = useState(null);\n  const [addDayDate, setAddDayDate] = useState(\n    formatDate(new Date(Date.now()), \"yyyy-MM-dd\")\n  );\n\n  const updateSettings = (property, value) =>\n    setSettings((current) => ({\n      ...current,\n      [property]: value,\n    }));\n\n  const addDay = (date) =>\n    setDays((current) => [...current, { date, timeslots: [] }]);\n\n  const addTimeslot = (dayIndex, timeslot) => {\n    setDays((current) => [\n      ...current.slice(0, dayIndex),\n      {\n        ...current[dayIndex],\n        timeslots: [...current[dayIndex].timeslots, timeslot],\n      },\n      ...current.slice(dayIndex + 1),\n    ]);\n  };\n\n  const updateTimeslot = (dayIndex, timeslotIndex, timeslot) => {\n    setDays((current) => [\n      ...current.slice(0, dayIndex),\n      {\n        ...current[dayIndex],\n        timeslots: [\n          ...current[dayIndex].timeslots.slice(0, timeslotIndex),\n          timeslot,\n          ...current[dayIndex].timeslots.slice(timeslotIndex + 1),\n        ],\n      },\n      ...current.slice(dayIndex + 1),\n    ]);\n    setEditTimeslot(null);\n  };\n\n  const deleteTimeslot = (dayIndex, timeslotIndex) => {\n    setDays((current) => [\n      ...current.slice(0, dayIndex),\n      {\n        ...current[dayIndex],\n        timeslots: [\n          ...current[dayIndex].timeslots.slice(0, timeslotIndex),\n          ...current[dayIndex].timeslots.slice(timeslotIndex + 1),\n        ],\n      },\n      ...current.slice(dayIndex + 1),\n    ]);\n  };\n\n  const calcEndTime = (date, timeslotsArray) => {\n    const timeslots = timeslotsArray.slice(0);\n    const dateString = formatDate(date, \"yyyy-MM-dd\");\n\n    if (!timeslots.find((timeslot) => isLunchTimeslot(timeslot))) {\n      const defaultLunchStart = new Date(`${dateString} 12:00`);\n      const defaultLunchEnd = addDate(new Date(defaultLunchStart), {\n        minutes: settings.lunchDuration,\n      });\n\n      timeslots.push({\n        activity: \"lunch\",\n        start: formatDate(defaultLunchStart, \"HH:mm\"),\n        end: formatDate(defaultLunchEnd, \"HH:mm\"),\n      });\n    }\n\n    let lunchDuration = Number.parseInt(settings.lunchDuration);\n    const lunchTimeslot = timeslots.find((timeslot) =>\n      isLunchTimeslot(timeslot)\n    );\n    if (lunchTimeslot) {\n      lunchDuration =\n        (new Date(`${dateString} ${lunchTimeslot.end}`) -\n          new Date(`${dateString} ${lunchTimeslot.start}`)) /\n        1000 /\n        60;\n    }\n\n    const endTime = addDate(new Date(`${dateString} ${timeslots[0].start}`), {\n      minutes: Math.floor(settings.workdayHours * 60) + lunchDuration,\n    });\n\n    return formatDate(endTime, \"HH:mm\");\n  };\n\n  const handleClearAll = () => {\n    if (window.confirm(\"Ta bort allt?\")) {\n      setDays([]);\n    }\n  };\n\n  const isEditEntry = (date, timeslotIndex) =>\n    date === editTimeslot?.date &&\n    timeslotIndex === editTimeslot?.timeslotIndex;\n\n  const hasDay = (date) =>\n    days.some((day) => formatDate(day.date, \"yyyy-MM-dd\") === date);\n\n  return (\n    <div className=\"root\">\n      <div className=\"wrapper\">\n        <div className=\"controls-wrapper\">\n          <div className=\"controls\">\n            {days.length > 0 && (\n              <button onClick={handleClearAll}>Rensa&nbsp;allt</button>\n            )}\n            <div className=\"input-wrapper\">\n              <label htmlFor=\"lunch-duration\">Lunch&nbsp;(min):</label>\n              <input\n                type=\"number\"\n                id=\"lunch-duration\"\n                value={settings.lunchDuration}\n                onChange={(e) =>\n                  updateSettings(\"lunchDuration\", e.target.value)\n                }\n              />\n            </div>\n            <div className=\"input-wrapper\">\n              <label htmlFor=\"workday-hours\">Arbetstid&nbsp;(timmar):</label>\n              <input\n                type=\"number\"\n                id=\"workday-hours\"\n                value={settings.workdayHours}\n                onChange={(e) => updateSettings(\"workdayHours\", e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n        {days.map(({ date, timeslots }, dayIndex, daysArray) => (\n          <div className=\"day\" key={date}>\n            <div className=\"header\">\n              <span className=\"title\">{formatEntryHeading(date)}</span>\n              <div className=\"summary-wrapper\">\n                <span className=\"summary\">\n                  {formatTimeslot(\n                    getTimeslotsSum(\n                      timeslots.filter((timeslot) => !isLunchTimeslot(timeslot))\n                    )\n                  )}\n                </span>\n                {timeslots.length > 0 && (\n                  <span className=\"summary\">\n                    {calcEndTime(date, timeslots)}\n                  </span>\n                )}\n              </div>\n            </div>\n            {timeslots.map((timeslot, timeslotIndex, timeslotsArray) =>\n              !isEditEntry(date, timeslotIndex) ? (\n                <div className=\"entry\" key={timeslot.start}>\n                  <div className=\"timespan\">\n                    {timeslot.start}&nbsp;-&nbsp;{timeslot.end}\n                  </div>\n                  <div className=\"description\">\n                    {timeslot.activity}\n                    {isLastInstanceOfActivityForDay(\n                      timeslotsArray,\n                      timeslot,\n                      timeslotIndex\n                    ) && (\n                      <span className=\"entry-summary\">\n                        (\n                        {getTotalTimeForActivity(\n                          timeslot.activity,\n                          timeslots\n                        ).toFixed(2)}\n                        )\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"entry-controls\">\n                    <button\n                      className=\"entry-control edit\"\n                      onClick={() => setEditTimeslot({ date, timeslotIndex })}\n                    />\n                    <button\n                      className=\"entry-control delete\"\n                      onClick={() => deleteTimeslot(dayIndex, timeslotIndex)}\n                    />\n                  </div>\n                </div>\n              ) : (\n                <EntryInput\n                  key={timeslot.start}\n                  onChange={(timeslot) =>\n                    updateTimeslot(dayIndex, timeslotIndex, timeslot)\n                  }\n                  {...timeslot}\n                />\n              )\n            )}\n            {dayIndex === daysArray.length - 1 && (\n              <EntryInput\n                onChange={(timeslot) => addTimeslot(dayIndex, timeslot)}\n              />\n            )}\n          </div>\n        ))}\n        {/*{!days.some(({ date }) => isToday(date)) && (*/}\n        {/*  <button className=\"add-today\" onClick={() => addDay(today)}>*/}\n        {/*    {formatEntryHeading(today)}*/}\n        {/*  </button>*/}\n        {/*)}*/}\n        <div className=\"add-day-wrapper\">\n          <input\n            type=\"date\"\n            value={addDayDate}\n            onChange={(e) => setAddDayDate(e.target.value)}\n          />\n          <button\n            onClick={() => addDay(new Date(addDayDate))}\n            disabled={hasDay(addDayDate)}\n          >\n            Lägg till\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}