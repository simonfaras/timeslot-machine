schema {
  query: Query
  mutation: Mutation
}
input CreateDayInput {
  date: Date!
  period: ID!
}
input CreatePeriodInput {
  lunchDurationMinutes: Int!
  worktimePercentage: Float!
}
input CreateTimeslotInput {
  start: Time!
  end: Time!
  day: ID!
  activity: String!
}
"""'Day' input values"""
input DayInput {
  period: DayPeriodRelation
  timeslots: DayTimeslotsRelation
  date: Date!
  owner: DayOwnerRelation
}
"""Allow manipulating the relationship between the types 'Day' and 'User' using the field 'Day.owner'."""
input DayOwnerRelation {
  """Create a document of type 'User' and associate it with the current document."""
  create: UserInput
  """Connect a document of type 'User' with the current document using its ID."""
  connect: ID
}
"""Allow manipulating the relationship between the types 'Day' and 'Period' using the field 'Day.period'."""
input DayPeriodRelation {
  """Create a document of type 'Period' and associate it with the current document."""
  create: PeriodInput
  """Connect a document of type 'Period' with the current document using its ID."""
  connect: ID
}
"""Allow manipulating the relationship between the types 'Day' and 'Timeslot'."""
input DayTimeslotsRelation {
  """Create one or more documents of type 'Timeslot' and associate them with the current document."""
  create: [TimeslotInput]
  """Connect one or more documents of type 'Timeslot' with the current document using their IDs."""
  connect: [ID]
  """Disconnect the given documents of type 'Timeslot' from the current document using their IDs."""
  disconnect: [ID]
}
type Mutation {
  updateUser(id: ID!, data: UpdateUserInput): User
  """Create a new document in the collection of 'User'"""
  createUser(
    """'User' input values"""
    data: UserInput!
  ): User!
  """Delete an existing document in the collection of 'Day'"""
  deleteDay(
    """The 'Day' document's ID"""
    id: ID!
  ): Day
  """Update an existing document in the collection of 'Timeslot'"""
  updateTimeslot(
    """The 'Timeslot' document's ID"""
    id: ID!
    """'Timeslot' input values"""
    data: TimeslotInput!
  ): Timeslot
  createDay(data: CreateDayInput!): Day!
  """Delete an existing document in the collection of 'Timeslot'"""
  deleteTimeslot(
    """The 'Timeslot' document's ID"""
    id: ID!
  ): Timeslot
  createPeriod(data: CreatePeriodInput): Period!
  """Delete an existing document in the collection of 'Period'"""
  deletePeriod(
    """The 'Period' document's ID"""
    id: ID!
  ): Period
  createTimeslot(data: CreateTimeslotInput!): Timeslot!
  """Delete an existing document in the collection of 'User'"""
  deleteUser(
    """The 'User' document's ID"""
    id: ID!
  ): User
  """Update an existing document in the collection of 'Day'"""
  updateDay(
    """The 'Day' document's ID"""
    id: ID!
    """'Day' input values"""
    data: DayInput!
  ): Day
  """Update an existing document in the collection of 'Period'"""
  updatePeriod(
    """The 'Period' document's ID"""
    id: ID!
    """'Period' input values"""
    data: PeriodInput!
  ): Period
}
"""Allow manipulating the relationship between the types 'Period' and 'Day'."""
input PeriodDaysRelation {
  """Create one or more documents of type 'Day' and associate them with the current document."""
  create: [DayInput]
  """Connect one or more documents of type 'Day' with the current document using their IDs."""
  connect: [ID]
  """Disconnect the given documents of type 'Day' from the current document using their IDs."""
  disconnect: [ID]
}
"""'Period' input values"""
input PeriodInput {
  days: PeriodDaysRelation
  settings: SettingsInput!
  owner: PeriodOwnerRelation
}
"""Allow manipulating the relationship between the types 'Period' and 'User' using the field 'Period.owner'."""
input PeriodOwnerRelation {
  """Create a document of type 'User' and associate it with the current document."""
  create: UserInput
  """Connect a document of type 'User' with the current document using its ID."""
  connect: ID
}
"""'Settings' input values"""
input SettingsInput {
  worktimePercentage: Float!
  lunchDurationMinutes: Int!
}
"""Allow manipulating the relationship between the types 'Timeslot' and 'Day' using the field 'Timeslot.day'."""
input TimeslotDayRelation {
  """Create a document of type 'Day' and associate it with the current document."""
  create: DayInput
  """Connect a document of type 'Day' with the current document using its ID."""
  connect: ID
}
"""'Timeslot' input values"""
input TimeslotInput {
  day: TimeslotDayRelation
  start: Time!
  end: Time!
  activity: String!
  owner: TimeslotOwnerRelation
}
"""Allow manipulating the relationship between the types 'Timeslot' and 'User' using the field 'Timeslot.owner'."""
input TimeslotOwnerRelation {
  """Create a document of type 'User' and associate it with the current document."""
  create: UserInput
  """Connect a document of type 'User' with the current document using its ID."""
  connect: ID
}
input UpdateUserInput {
  worktimePercentage: Float!
  lunchDurationMinutes: Int!
}
"""'User' input values"""
input UserInput {
  name: String!
  email: String!
  image: String
  createdAt: Time!
  updatedAt: Time!
  defaultSettings: SettingsInput
}
scalar Date
type Day {
  """The document's ID."""
  _id: ID!
  date: Date!
  owner: User!
  timeslots(
    """The number of items to return per page."""
    _size: Int
    """The pagination cursor."""
    _cursor: String
  ): TimeslotPage!
  period: Period!
  """The document's timestamp."""
  _ts: Long!
}
"""The pagination object for elements of type 'Day'."""
type DayPage {
  """The elements of type 'Day' in this page."""
  data: [Day]!
  """A cursor for elements coming after the current page."""
  after: String
  """A cursor for elements coming before the current page."""
  before: String
}
type Period {
  """The document's ID."""
  _id: ID!
  owner: User!
  settings: Settings!
  days(
    """The number of items to return per page."""
    _size: Int
    """The pagination cursor."""
    _cursor: String
  ): DayPage!
  """The document's timestamp."""
  _ts: Long!
}
"""The pagination object for elements of type 'Period'."""
type PeriodPage {
  """The elements of type 'Period' in this page."""
  data: [Period]!
  """A cursor for elements coming after the current page."""
  after: String
  """A cursor for elements coming before the current page."""
  before: String
}
type Query {
  getAllPeriods(
    """The number of items to return per page."""
    _size: Int
    """The pagination cursor."""
    _cursor: String
  ): PeriodPage!
  """Find a document from the collection of 'Day' by its id."""
  findDayByID(
    """The 'Day' document's ID"""
    id: ID!
  ): Day
  """Find a document from the collection of 'User' by its id."""
  findUserByID(
    """The 'User' document's ID"""
    id: ID!
  ): User
  """Find a document from the collection of 'Period' by its id."""
  findPeriodByID(
    """The 'Period' document's ID"""
    id: ID!
  ): Period
  """Find a document from the collection of 'Timeslot' by its id."""
  findTimeslotByID(
    """The 'Timeslot' document's ID"""
    id: ID!
  ): Timeslot
}
type Settings {
  worktimePercentage: Float!
  lunchDurationMinutes: Int!
}
scalar Time
type Timeslot {
  """The document's ID."""
  _id: ID!
  end: Time!
  owner: User!
  start: Time!
  activity: String!
  day: Day!
  """The document's timestamp."""
  _ts: Long!
}
"""The pagination object for elements of type 'Timeslot'."""
type TimeslotPage {
  """The elements of type 'Timeslot' in this page."""
  data: [Timeslot]!
  """A cursor for elements coming after the current page."""
  after: String
  """A cursor for elements coming before the current page."""
  before: String
}
type User {
  name: String!
  updatedAt: Time!
  email: String!
  image: String
  """The document's ID."""
  _id: ID!
  createdAt: Time!
  defaultSettings: Settings
  """The document's timestamp."""
  _ts: Long!
}
"""The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1."""
scalar Long
directive @embedded on OBJECT
directive @collection(name: String!) on OBJECT
directive @index(name: String!) on FIELD_DEFINITION
directive @resolver(name: String, paginated: Boolean! = false) on FIELD_DEFINITION
directive @relation(name: String) on FIELD_DEFINITION
directive @unique(index: String) on FIELD_DEFINITION